from aiogram import types
from handlers.loader import dp
from keyboards.default import kb_menu,kb_menu2
from keyboards.inline import ikb_menu, ikb_menu2, ikb_menu3, ikb_menu4,ikb_menu5,ikb_menu6
from aiogram.types import CallbackQuery
from aiogram.dispatcher.filters import Command
@dp.message_handler(text='/start')
async def command_start(message: types.Message):
    await message.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ,'
                         '—á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å'
                         '  –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å'
                         '    —É—Å–ª–æ–≤–∏—è–º–∏  '
                         '  –ø—Ä–µ–¥–æ—Å—Ç–≤–∞–ª–µ–Ω–∏—è'
                         '      —É—Å–ª—É–≥?', reply_markup=kb_menu)
@dp.message_handler(text='–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω')
async def command_star(message: types.Message):
    await message.answer('üåê–Ø–∑—ã–∫\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\n'
                         ' –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.', reply_markup=ikb_menu)
@dp.callback_query_handler(text='–†—É—Å—Å–∫–∏–π')
async def command_sta(call: CallbackQuery):
    await call.message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {call.message.from_user.full_name}\n'
                      f'–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
                      f'Crypto Bankroll https://www.google.com/ –¥–ª—è –æ–±–º–µ–Ω–∞'
                      f'–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Tether(USDT) –∏'
                      f'        —Ñ–∏–∞—Ç–Ω—ã—Ö –¥–µ–Ω–µ–≥.',reply_markup=kb_menu2)
@dp.message_handler(text='üìä–û–±–º–µ–Ω USDT/USD')
async def command_st(message: types.Message):
    await message.answer('            –û–±–º–µ–Ω USDT/USD\n\n'
                         '–ó–¥–µ—Å—å –í—ã —Å–æ–≤–µ—Ä—à–∞–µ—Ç–µ —Å–¥–µ–ª–∫–∏ —Å –ª—é–¥—å–º–∏, –∞ –±–æ—Ç'
                         '           –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –≥–∞—Ä–∞–Ω—Ç.\n'
                         '  –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ï–≥–æ'
                         '–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è 2—Ö —Å–¥–µ–ª–æ–∫.\n'
                         ' –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å'
                         '    –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫—É—Ä—Å, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω'
                         '  –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ '
                         '                 —Å–¥–µ–ª–∫–µ!\n'
                         '–í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ—Å–∏–º'
                         '      —Å–æ–æ–±—â–∏—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏', reply_markup=ikb_menu2)
@dp.callback_query_handler(text='üìä–ú–æ–∏ —Å–¥–µ–ª–∫–∏')
async def command_s(call: CallbackQuery):
    await call.message.answer('–ú–æ–∏ —Å–¥–µ–ª–∫–∏', reply_markup=ikb_menu3)

@dp.callback_query_handler(text='üìä–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
async def command_t(call: CallbackQuery):
    await call.message.answer('–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', reply_markup=ikb_menu4)


@dp.callback_query_handler(text='üìä–£–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É')
async def command_tr(call: CallbackQuery):
    await call.message.answer('–£–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É', reply_markup=ikb_menu5)


@dp.callback_query_handler(text='üìä–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫')
async def command_tre(call: CallbackQuery):
    await call.message.answer('üìä–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫',reply_markup=ikb_menu6)


@dp.callback_query_handler(text='üìä–í—Å–µ —Å–¥–µ–ª–∫–∏')
async def command_tree(call: CallbackQuery):
    await call.message.answer('–í—Å–µ —Å–¥–µ–ª–∫–∏')


@dp.callback_query_handler(text='üìä–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥')
async def command_tre(call: CallbackQuery):
    await call.message.answer('üìä–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', reply_markup=ikb_menu4)